#!/usr/bin/env gjs
/**
 * AMD Compatible module loader
 *
 * @param root object
 * @returns module loader function define
 *
 */
var define = (function (modules) {
    return function (name, deps, callback) {
        modules[name] = { id: name, exports: {} };
        var args = [function (name) { return modules[name].exports; }, modules[name].exports];
        for (var i = 2; i < deps.length; i++)
            args.push(modules[deps[i]].exports);
        callback.apply(modules[name].exports, args);
    };
}({}));
define("AppWindow", ["require", "exports"], function (require, exports) {
    "use strict";
    // Generated by CoffeeScript 1.11.1
    var AppWindow, GLib, Gio, Gtk, Lang, readFile;
    Lang = imports.lang;
    GLib = imports.gi.GLib;
    Gio = imports.gi.Gio;
    Gtk = imports.gi.Gtk;
    readFile = function (filename) {
        var data, file, length, ref, success;
        file = Gio.file_new_for_path(filename);
        ref = file.load_contents(null), success = ref[0], data = ref[1], length = ref[2];
        return data;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AppWindow = (function () {
        var Gjs_AppWindow;
        Gjs_AppWindow = Lang.Class({
            Name: 'AppWindow',
            Extends: Gtk.ApplicationWindow,
            Template: readFile('data/main.ui'),
            Children: ['background'],
            _init: function (params, outer) {
                this.parent(params);
            }
        });
        function AppWindow(params) {
            this.application = params.application;
            this.buildAppMenu();
            this.window = new Gjs_AppWindow(params, this);
        }
        /*
         * builds the Application Menu
         *
         * main app menu
         */
        AppWindow.prototype.buildAppMenu = function () {
            var aboutAction, menu, newAction, quitAction;
            menu = new Gio.Menu();
            menu.append("New", 'app.new');
            menu.append("About", 'app.about');
            menu.append("Quit", 'app.quit');
            this.application.set_app_menu(menu);
            newAction = new Gio.SimpleAction({
                name: 'new'
            });
            newAction.connect('activate', (function (_this) {
                return function () {
                    return _this.showNew();
                };
            })(this));
            this.application.add_action(newAction);
            aboutAction = new Gio.SimpleAction({
                name: 'about'
            });
            aboutAction.connect('activate', (function (_this) {
                return function () {
                    return _this.showAbout();
                };
            })(this));
            this.application.add_action(aboutAction);
            quitAction = new Gio.SimpleAction({
                name: 'quit'
            });
            quitAction.connect('activate', (function (_this) {
                return function () {
                    return _this.window.destroy();
                };
            })(this));
            this.application.add_action(quitAction);
        };
        /*
         * New project dialog
         */
        AppWindow.prototype.showNew = function () {
            return print("Not implemented");
        };
        /*
         * About dialog
         */
        AppWindow.prototype.showAbout = function () {
            var about;
            about = new Gtk.AboutDialog();
            about.set_program_name("Bosco Player");
            about.set_version("1.0");
            about.set_comments("If it's not dark, it's not data");
            about.set_website("http://darkoverlordofdata.com");
            about.set_website_label("Dark Overlord of Data");
            about.set_authors(["bruce davidson"]);
            about.run();
            return about.destroy();
        };
        return AppWindow;
    })();
});
define("main", ["require", "exports", "AppWindow"], function (require, exports, AppWindow_1) {
    "use strict";
    // Generated by CoffeeScript 1.11.1
    var App, GLib, Gio, Gtk, app;
    GLib = imports.gi.GLib;
    Gio = imports.gi.Gio;
    Gtk = imports.gi.Gtk;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = App = (function () {
        function App() {
            this.application = new Gtk.Application({
                application_id: 'com.darkoverlordodfdata.player',
                flags: Gio.ApplicationFlags.FLAGS_NONE
            });
            this.application.connect('activate', (function (_this) {
                return function () {
                    return _this.activate();
                };
            })(this));
        }
        App.prototype.activate = function () {
            this.window = new AppWindow_1.default({
                application: this.application
            }).window;
            this.window.present();
        };
        return App;
    })();
    app = new App();
    app.application.run(ARGV);
});
