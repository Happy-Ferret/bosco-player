#!/usr/bin/env gjs
/**
 * AMD Compatible module loader
 *
 * @param root object
 * @returns module loader function define
 *
 */
var define = (function (modules) {
    return function (name, deps, callback) {
        modules[name] = { id: name, exports: {} };
        var args = [function (name) { return modules[name].exports; }, modules[name].exports];
        for (var i = 2; i < deps.length; i++)
            args.push(modules[deps[i]].exports);
        callback.apply(modules[name].exports, args);
    };
}({}));
define("GResource", ["require", "exports"], function (require, exports) {
    "use strict";
    // Generated by CoffeeScript 1.11.1
    var GLib, GResource, Gdk, Gio, Gtk, Notify;
    GLib = imports.gi.GLib;
    Gio = imports.gi.Gio;
    Gdk = imports.gi.Gdk;
    Gtk = imports.gi.Gtk;
    Notify = imports.gi.Notify;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = GResource = (function () {
        function GResource(config) {
            this.resName = config.res_name;
            this.resPrefix = config.res_prefix;
            this.files = [];
        }
        GResource.prototype.setName = function (name) {
            return this.resName = name;
        };
        GResource.prototype.setPrefix = function (prefix) {
            return this.resPrefix = prefix;
        };
        /*
         * add
         *
         * @param dir
         */
        GResource.prototype.add = function (dir) {
            var e, file, fileEnum, info, results;
            this.base = this.base || dir.get_parent();
            if (dir.query_info("standard::*", Gio.FileQueryInfoFlags.NONE, null).get_file_type() !== Gio.FileType.DIRECTORY) {
                this.files.push(dir);
                return;
            }
            fileEnum = null;
            try {
                fileEnum = dir.enumerate_children("standard::name,standard::type", Gio.FileQueryInfoFlags.NONE, null);
            }
            catch (error) {
                e = error;
                fileEnum = null;
            }
            if (fileEnum !== null) {
                info = null;
                results = [];
                while (info = fileEnum.next_file(null) !== null) {
                    file = dir.resolve_relative_path(info.get_name());
                    if (info.get_file_type() === Gio.FileType.DIRECTORY) {
                        results.push(this.add(file));
                    }
                    else {
                        results.push(this.files.push(file));
                    }
                }
                return results;
            }
        };
        /*
         * build
         *
         */
        GResource.prototype.build = function () {
            var file, i, info, len, outputstream, path, ref, xml, xmlfile;
            xml = "<?xml version='1.0' encoding='UTF-8'?>\n";
            xml += "<gresources>\n\t<gresource prefix='" + this.resPrefix + "'>\n";
            ref = this.files;
            for (i = 0, len = ref.length; i < len; i++) {
                file = ref[i];
                info = file.query_info("standard::*", Gio.FileQueryInfoFlags.NONE, null);
                xml += "\t\t";
                path = this.base.get_relative_path(file).replace(/&/g, "&amp").replace(/</g, "&lt").replace(/>/g, "&gt").replace(/"/g, "&quot").replace(/'/g, "&apos");
                if (/image\//.test(info.get_content_type())) {
                    xml += "<file preprocess='to-pixdata'>" + path + "</file>\n";
                }
                else {
                    xml += "<file>" + path + "</file>\n";
                }
            }
            xml += "\t</gresource>\n</gresources>\n";
            xmlfile = this.base.resolve_relative_path(this.resName + ".xml");
            if (xmlfile.query_exists(null)) {
                xmlfile["delete"](null);
            }
            outputstream = xmlfile.create(Gio.FileCreateFlags.REPLACE_DESTINATION, null);
            outputstream.write_all(xml, null);
            return outputstream.close(null);
        };
        /*
         * compile
         *
         * @param next
         */
        GResource.prototype.compile = function (next) {
            var e, ok, pid, ref;
            if (next == null) {
                next = (function (_this) {
                    return function () {
                        return {};
                    };
                })(this);
            }
            try {
                ref = GLib.spawn_async(this.base.get_path(), ["glib-compile-resources", this.resName + ".xml"], GLib.get_environ(), GLib.SpawnFlags.SEARCH_PATH_FROM_ENVP | GLib.SpawnFlags.DO_NOT_REAP_CHILD, null), ok = ref[0], pid = ref[1];
            }
            catch (error) {
                e = error;
                printerr(e);
            }
            if (ok === false) {
                return;
            }
            if (typeof pid === "number") {
                return GLib.child_watch_add(GLib.PRIORITY_DEFAULT, pid, (function (_this) {
                    return function () {
                        var notification;
                        GLib.spawn_close_pid(pid);
                        try {
                            notification = new Notify.Notification({
                                summary: "Gresource file generated!",
                                body: _this.resName + " generated at " + _this.base.get_path(),
                                icon_name: "dialog-information"
                            });
                            notification.set_timeout(1000);
                            notification.show();
                        }
                        catch (error) {
                            e = error;
                            printerr(e);
                        }
                        return next();
                    };
                })(this));
            }
        };
        return GResource;
    })();
});
define("Application", ["require", "exports"], function (require, exports) {
    "use strict";
    // Generated by CoffeeScript 1.11.1
    var Application, GLib, Gdk, Gio, Gtk, Notify;
    GLib = imports.gi.GLib;
    Gio = imports.gi.Gio;
    Gdk = imports.gi.Gdk;
    Gtk = imports.gi.Gtk;
    Notify = imports.gi.Notify;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Application = (function () {
        function Application(config) {
            this.projectPath = "";
            this.application = new Gtk.Application({
                application_id: "com.darkoverlordofdata.bosco",
                flags: Gio.ApplicationFlags.FLAGS_NONE
            });
            this.application.connect("activate", (function (_this) {
                return function () {
                    return _this.window.present();
                };
            })(this));
            this.application.connect("startup", (function (_this) {
                return function () {
                    _this.buildMenu();
                    return _this.buildUI(config);
                };
            })(this));
        }
        Application.prototype.buildMenu = function () {
            var aboutAction, menu, newAction, quitAction;
            menu = new Gio.Menu();
            menu.append("New", 'app.new');
            menu.append("About", 'app.about');
            menu.append("Quit", 'app.quit');
            this.application.set_app_menu(menu);
            newAction = new Gio.SimpleAction({
                name: 'new'
            });
            newAction.connect('activate', (function (_this) {
                return function () {
                    return _this.showNew();
                };
            })(this));
            this.application.add_action(newAction);
            aboutAction = new Gio.SimpleAction({
                name: 'about'
            });
            aboutAction.connect('activate', (function (_this) {
                return function () {
                    return _this.showAbout();
                };
            })(this));
            this.application.add_action(aboutAction);
            quitAction = new Gio.SimpleAction({
                name: 'quit'
            });
            quitAction.connect('activate', (function (_this) {
                return function () {
                    return _this.window.destroy();
                };
            })(this));
            this.application.add_action(quitAction);
        };
        /*
         * buildUI
         *
         * @param config
         */
        Application.prototype.buildUI = function (config) {
            var addbutton, background, css, e, grid, label, menu, menubutton, nameentry, namelabel, prefixentry, prefixlabel;
            this.window = new Gtk.ApplicationWindow({
                application: this.application,
                window_position: Gtk.WindowPosition.CENTER,
                title: config.app_name
            });
            try {
                this.window.set_icon_from_file("/home/bruce/gjs/bosco/data/bosco.png");
            }
            catch (error) {
                e = error;
                printerr(e);
            }
            this.headerbar = new Gtk.HeaderBar({
                title: config.app_name,
                show_close_button: true
            });
            grid = new Gtk.Grid({
                column_spacing: 10,
                row_spacing: 10,
                margin: 10
            });
            grid.set_column_homogeneous(true);
            namelabel = new Gtk.Label({
                label: "File name:"
            });
            namelabel.set_halign(Gtk.Align.END);
            nameentry = new Gtk.Entry();
            nameentry.connect("changed", (function (_this) {
                return function () {
                    return config.res_name = nameentry.get_text();
                };
            })(this));
            nameentry.set_placeholder_text(config.res_name);
            grid.attach(namelabel, 0, 0, 1, 1);
            grid.attach_next_to(nameentry, namelabel, Gtk.PositionType.RIGHT, 2, 1);
            prefixlabel = new Gtk.Label({
                label: "Resource prefix:"
            });
            prefixlabel.set_halign(Gtk.Align.END);
            prefixentry = new Gtk.Entry();
            prefixentry.set_placeholder_text(config.res_prefix);
            prefixentry.connect("changed", (function (_this) {
                return function () {
                    var res_prefix;
                    return res_prefix = prefixentry.get_text();
                };
            })(this));
            grid.attach(prefixlabel, 0, 1, 1, 1);
            grid.attach_next_to(prefixentry, prefixlabel, Gtk.PositionType.RIGHT, 2, 1);
            menubutton = new Gtk.ToggleButton();
            menubutton.add(new Gtk.Image({
                icon_name: "open-menu-symbolic",
                icon_size: Gtk.IconSize.SMALL_TOOLBAR
            }));
            menubutton.connect("clicked", (function (_this) {
                return function () {
                    if (menubutton.get_active()) {
                        return menu.show_all();
                    }
                };
            })(this));
            menu = new Gtk.Popover();
            menu.set_relative_to(menubutton);
            menu.connect("show", (function (_this) {
                return function () {
                    nameentry.set_text(config.res_name);
                    return prefixentry.set_text(config.res_prefix);
                };
            })(this));
            menu.connect("closed", (function (_this) {
                return function () {
                    var outputstream, parent, res_prefix, write;
                    if (menubutton.get_active()) {
                        menubutton.set_active(false);
                    }
                    config.res_name = config.res_name || config.res_name;
                    res_prefix = res_prefix || config.res_prefix;
                    write = false;
                    if (config.config.res_name !== config.res_name) {
                        config.config.res_name = config.res_name;
                        write = true;
                    }
                    if (config.res_prefix !== res_prefix) {
                        config.res_prefix = res_prefix;
                        write = true;
                    }
                    if (write) {
                        parent = config_file.get_parent();
                        if (parent.query_exists(null)) {
                            if (config_file.query_exists(null)) {
                                config_file["delete"](null);
                            }
                        }
                        else {
                            parent.make_directory_with_parents(null);
                        }
                        outputstream = config_file.create(Gio.FileCreateFlags.REPLACE_DESTINATION, null);
                        outputstream.write_all(JSON.stringify(config), null);
                        return outputstream.close(null);
                    }
                };
            })(this));
            menu.add(grid);
            this.headerbar.pack_end(menubutton);
            background = new Gtk.Box();
            background.set_vexpand(true);
            background.set_hexpand(true);
            label = new Gtk.Label({
                label: "Welcome to Bosco Player"
            });
            background.set_center_widget(label);
            css = new Gtk.CssProvider();
            css.load_from_data("* { font-family: OpenDyslexic ; font-size: xx-large }");
            background.get_style_context().add_provider(css, 0);
            this.window.add(background);
            addbutton = new Gtk.Button();
            addbutton.add(new Gtk.Image({
                icon_name: "document-open-symbolic",
                icon_size: Gtk.IconSize.SMALL_TOOLBAR
            }));
            addbutton.connect("clicked", (function (_this) {
                return function () {
                    var chooser;
                    chooser = new Gtk.FileChooserDialog({
                        title: "Select Project Folder",
                        action: Gtk.FileChooserAction.SELECT_FOLDER,
                        transient_for: _this.window,
                        modal: true
                    });
                    chooser.set_select_multiple(false);
                    chooser.add_button("Open", Gtk.ResponseType.OK);
                    chooser.add_button("Cancel", Gtk.ResponseType.CANCEL);
                    chooser.set_default_response(Gtk.ResponseType.OK);
                    chooser.connect("response", function (dialog, response) {
                        _this.projectPath = dialog.get_uris();
                        dialog.destroy();
                        if (response === Gtk.ResponseType.OK && _this.projectPath && _this.projectPath.length) {
                            return print("Selected " + _this.projectPath);
                        }
                    });
                    return chooser.run();
                };
            })(this));
            this.headerbar.pack_start(addbutton);
            this.window.set_default_size(800, 600);
            this.window.set_titlebar(this.headerbar);
            return this.window.show_all();
        };
        /*
         * New project dialog
         */
        Application.prototype.showNew = function () {
            return print("Not implemented");
        };
        /*
         * About dialog
         */
        Application.prototype.showAbout = function () {
            var about;
            about = new Gtk.AboutDialog();
            about.set_program_name("Bosco Player");
            about.set_version("1.0");
            about.set_comments("If it's not dark, it's not data");
            about.set_website("http://darkoverlordofdata.com");
            about.set_website_label("Dark Overlord of Data");
            about.set_authors(["bruce davidson"]);
            about.run();
            return about.destroy();
        };
        return Application;
    })();
});
define("bosco", ["require", "exports", "Application"], function (require, exports, Application_1) {
    "use strict";
    // Generated by CoffeeScript 1.11.1
    var GLib, Gdk, Gio, Gtk, Notify, app, config, config_file, data, e, ref, ref1, res_name_default, res_prefix_default, size;
    GLib = imports.gi.GLib;
    Gio = imports.gi.Gio;
    Gdk = imports.gi.Gdk;
    Gtk = imports.gi.Gtk;
    Notify = imports.gi.Notify;
    res_name_default = "custom.gresource";
    res_prefix_default = "/com/darkoverlordofdata/custom";
    config = {};
    config_file = Gio.File.new_for_path(GLib.get_user_data_dir() + "/bosco/config.json");
    if (config_file.query_exists(null)) {
        size = config_file.query_info("standard::size", Gio.FileQueryInfoFlags.NONE, null).get_size();
        try {
            data = config_file.read(null).read_bytes(size, null).get_data();
            config = JSON.parse(data);
        }
        catch (error) {
            e = error;
            printerr(e);
        }
    }
    print("res_name_default = " + res_name_default);
    print("res_prefix_default = " + res_prefix_default);
    config.res_name = (ref = config.res_name) != null ? ref : res_name_default;
    config.res_prefix = (ref1 = config.res_prefix) != null ? ref1 : res_prefix_default;
    config.app_name = "Player";
    Notify.init(config.app_name);
    app = new Application_1.default(config);
    app.application.run(ARGV);
});
