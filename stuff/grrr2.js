// Generated by CoffeeScript 1.11.1
(function() {
  var APP_NAME, Application, GLib, GResource, Gdk, Gio, Gtk, Notify, app, config, config_file, data, e, res_name, res_name_default, res_prefix, res_prefix_default, size;

  GLib = imports.gi.GLib;

  Gio = imports.gi.Gio;

  Gdk = imports.gi.Gdk;

  Gtk = imports.gi.Gtk;

  Notify = imports.gi.Notify;

  APP_NAME = "Grrr!";

  Notify.init(APP_NAME);

  res_name_default = "custom.gresource";

  res_prefix_default = "/org/gnome/custom";

  res_name = res_name_defaultnew;

  res_prefix = res_prefix_default;

  config = {};

  config_file = Gio.File.new_for_path(GLib.get_user_data_dir() + "/grrr/config.json");

  if (config_file.query_exists(null)) {
    size = config_file.query_info("standard::size", Gio.FileQueryInfoFlags.NONE, null).get_size();
    try {
      data = config_file.read(null).read_bytes(size, null).get_data();
      config = JSON.parse(data);
      if (config.res_name) {
        res_name = config.res_name;
      }
      if (config.res_prefix) {
        res_prefix = config.res_prefix;
      }
    } catch (error) {
      e = error;
      printerr(e);
    }
  }

  GResource = (function() {
    GResource.prototype._name = res_name;

    GResource.prototype._prefix = res_prefix;

    function GResource() {
      this._files = [];
    }

    GResource.prototype.set_name = function(name) {
      return this._name = name;
    };

    GResource.prototype.set_prefix = function(prefix) {
      return this._prefix = prefix;
    };

    GResource.prototype.add = function(dir) {
      var file, fileEnum, info, results;
      this._base = this._base || dir.get_parent();
      if (dir.query_info("standard::*", Gio.FileQueryInfoFlags.NONE, null).get_file_type() !== Gio.FileType.DIRECTORY) {
        this._files.push(dir);
        return;
      }
      fileEnum = null;
      try {
        fileEnum = dir.enumerate_children("standard::name,standard::type", Gio.FileQueryInfoFlags.NONE, null);
      } catch (error) {
        e = error;
        fileEnum = null;
      }
      if (fileEnum !== null) {
        info = null;
        results = [];
        while (info = fileEnum.next_file(null) !== null) {
          file = dir.resolve_relative_path(info.get_name());
          if (info.get_file_type() === Gio.FileType.DIRECTORY) {
            results.push(this.add(file));
          } else {
            results.push(this._files.push(file));
          }
        }
        return results;
      }
    };

    GResource.prototype.build = function() {
      var file, i, info, len, outputstream, path, ref, xml, xmlfile;
      xml = "<?xml version='1.0' encoding='UTF-8'?>\n";
      xml += "<gresources>\n\t<gresource prefix='" + this._prefix + "'>\n";
      ref = this._files;
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        info = file.query_info("standard::*", Gio.FileQueryInfoFlags.NONE, null);
        xml += "\t\t";
        path = this._base.get_relative_path(file).replace(/&/g, "&amp").replace(/</g, "&lt").replace(/>/g, "&gt").replace(/"/g, "&quot").replace(/'/g, "&apos");
        if (/image\//.test(info.get_content_type())) {
          xml += "<file preprocess='to-pixdata'>" + path + "</file>\n";
        } else {
          xml += "<file>" + path + "</file>\n";
        }
      }
      xml += "\t</gresource>\n</gresources>\n";
      xmlfile = this._base.resolve_relative_path(this._name + ".xml");
      if (xmlfile.query_exists(null)) {
        xmlfile["delete"](null);
      }
      outputstream = xmlfile.create(Gio.FileCreateFlags.REPLACE_DESTINATION, null);
      outputstream.write_all(xml, null);
      return outputstream.close(null);
    };

    GResource.prototype.compile = function(cb) {
      var ok, pid, ref;
      if (cb == null) {
        cb = (function(_this) {
          return function() {
            return {};
          };
        })(this);
      }
      try {
        ref = GLib.spawn_async(this._base.get_path(), ["glib-compile-resources", this._name + ".xml"], GLib.get_environ(), GLib.SpawnFlags.SEARCH_PATH_FROM_ENVP | GLib.SpawnFlags.DO_NOT_REAP_CHILD, null), ok = ref[0], pid = ref[1];
      } catch (error) {
        e = error;
        printerr(e);
      }
      if (ok === false) {
        return;
      }
      if (typeof pid === "number") {
        return GLib.child_watch_add(GLib.PRIORITY_DEFAULT, pid, (function(_this) {
          return function() {
            var notification;
            GLib.spawn_close_pid(pid);
            try {
              notification = new Notify.Notification({
                summary: "Gresource file generated!",
                body: _this._name + " generated at " + _this._base.get_path(),
                icon_name: "dialog-information"
              });
              notification.set_timeout(1000);
              notification.show();
            } catch (error) {
              e = error;
              printerr(e);
            }
            return cb();
          };
        })(this));
      }
    };

    return GResource;

  })();

  Application = (function() {
    Application.prototype.Name = APP_NAME;

    function Application() {
      this.application = new Gtk.Application({
        application_id: "org.ozonos.grrr",
        flags: Gio.ApplicationFlags.FLAGS_NONE
      });
      this.application.connect("activate", (function(_this) {
        return function() {
          return _this._window.present();
        };
      })(this));
      this.application.connect("startup", (function(_this) {
        return function() {
          return _this._buildUI();
        };
      })(this));
    }

    Application.prototype._buildUI = function() {
      var addbutton, css, dnd, generate, grid, icon, label, menu, menubutton, nameentry, namelabel, prefixentry, prefixlabel, spinner;
      this._window = new Gtk.ApplicationWindow({
        application: this.application,
        window_position: Gtk.WindowPosition.CENTER,
        title: APP_NAME
      });
      try {
        icon = Gtk.IconTheme.get_default().load_icon("binary", 48, 0);
        this._window.set_icon(icon);
      } catch (error) {
        e = error;
        printerr(e);
      }
      this._headerbar = new Gtk.HeaderBar({
        title: APP_NAME,
        show_close_button: true
      });
      grid = new Gtk.Grid({
        column_spacing: 10,
        row_spacing: 10,
        margin: 10
      });
      grid.set_column_homogeneous(true);
      namelabel = new Gtk.Label({
        label: "File name:"
      });
      namelabel.set_halign(Gtk.Align.END);
      nameentry = new Gtk.Entry();
      nameentry.connect("changed", (function(_this) {
        return function() {
          return res_name = nameentry.get_text();
        };
      })(this));
      nameentry.set_placeholder_text(res_name_default);
      grid.attach(namelabel, 0, 0, 1, 1);
      grid.attach_next_to(nameentry, namelabel, Gtk.PositionType.RIGHT, 2, 1);
      prefixlabel = new Gtk.Label({
        label: "Resource prefix:"
      });
      prefixlabel.set_halign(Gtk.Align.END);
      prefixentry = new Gtk.Entry();
      prefixentry.set_placeholder_text(res_prefix_default);
      prefixentry.connect("changed", (function(_this) {
        return function() {
          return res_prefix = prefixentry.get_text();
        };
      })(this));
      grid.attach(prefixlabel, 0, 1, 1, 1);
      grid.attach_next_to(prefixentry, prefixlabel, Gtk.PositionType.RIGHT, 2, 1);
      menubutton = new Gtk.ToggleButton();
      menubutton.add(new Gtk.Image({
        icon_name: "open-menu-symbolic",
        icon_size: Gtk.IconSize.SMALL_TOOLBAR
      }));
      menubutton.connect("clicked", (function(_this) {
        return function() {
          if (menubutton.get_active()) {
            return menu.show_all();
          }
        };
      })(this));
      menu = new Gtk.Popover();
      menu.set_relative_to(menubutton);
      menu.connect("show", (function(_this) {
        return function() {
          nameentry.set_text(res_name);
          return prefixentry.set_text(res_prefix);
        };
      })(this));
      menu.connect("closed", (function(_this) {
        return function() {
          var outputstream, parent, write;
          if (menubutton.get_active()) {
            menubutton.set_active(false);
          }
          res_name = res_name || res_name_default;
          res_prefix = res_prefix || res_prefix_default;
          write = false;
          if (config.res_name !== res_name) {
            config.res_name = res_name;
            write = true;
          }
          if (config.res_prefix !== res_prefix) {
            config.res_prefix = res_prefix;
            write = true;
          }
          if (write) {
            parent = config_file.get_parent();
            if (parent.query_exists(null)) {
              if (config_file.query_exists(null)) {
                config_file["delete"](null);
              }
            } else {
              parent.make_directory_with_parents(null);
            }
            outputstream = config_file.create(Gio.FileCreateFlags.REPLACE_DESTINATION, null);
            outputstream.write_all(JSON.stringify(config), null);
            return outputstream.close(null);
          }
        };
      })(this));
      menu.add(grid);
      this._headerbar.pack_end(menubutton);
      spinner = new Gtk.Spinner({
        active: true
      });
      spinner.set_size_request(64, 64);
      label = new Gtk.Label({
        label: "Drop files and folders to generate a gresource file!"
      });
      dnd = new Gtk.Box();
      dnd.set_vexpand(true);
      dnd.set_hexpand(true);
      dnd.drag_dest_set(Gtk.DestDefaults.ALL, null, Gdk.DragAction.COPY);
      dnd.drag_dest_add_text_targets();
      generate = (function(_this) {
        return function(uris) {
          var gresource, i, len, uri;
          gresource = new GResource();
          for (i = 0, len = uris.length; i < len; i++) {
            uri = uris[i];
            gresource.add(Gio.File.new_for_uri(uri));
          }
          gresource.build();
          return gresource.compile(function() {
            var complete;
            complete = new Gtk.Label({
              label: res_name + " generated!"
            });
            dnd.set_center_widget(complete);
            dnd.show_all();
            return GLib.timeout_add(GLib.PRIORITY_DEFAULT, 3000, function() {
              dnd.set_center_widget(label);
              dnd.show_all();
              return false;
            }, null);
          });
        };
      })(this);
      dnd.connect("drag_data_received", (function(_this) {
        return function(s, c, x, y, selection) {
          var text;
          dnd.set_center_widget(spinner);
          dnd.show_all();
          text = selection.get_text();
          if (text) {
            return generate(text.split("\n").map(u(function() {
              return u.trim();
            })).filter(u(function() {
              return !!u;
            })));
          }
        };
      })(this));
      dnd.set_center_widget(label);
      addbutton = new Gtk.Button();
      addbutton.add(new Gtk.Image({
        icon_name: "list-add-symbolic",
        icon_size: Gtk.IconSize.SMALL_TOOLBAR
      }));
      addbutton.connect("clicked", (function(_this) {
        return function() {
          var chooser;
          chooser = new Gtk.FileChooserDialog({
            title: "Select folders",
            action: Gtk.FileChooserAction.SELECT_FOLDER,
            transient_for: _this._window,
            modal: true
          });
          chooser.set_select_multiple(true);
          chooser.add_button("Add", Gtk.ResponseType.OK);
          chooser.add_button("Cancel", Gtk.ResponseType.CANCEL);
          chooser.set_default_response(Gtk.ResponseType.OK);
          chooser.connect("response", function(dialog, response) {
            var uris;
            uris = dialog.get_uris();
            dialog.destroy();
            if (response === Gtk.ResponseType.OK && uris && uris.length) {
              return generate(uris);
            }
          });
          return chooser.run();
        };
      })(this));
      this._headerbar.pack_start(addbutton);
      css = new Gtk.CssProvider();
      css.load_from_data("* { font-size: large }");
      dnd.get_style_context().add_provider(css, 0);
      this._window.add(dnd);
      this._window.set_default_size(800, 600);
      this._window.set_titlebar(this._headerbar);
      return this._window.show_all();
    };

    Application.prototype._onActivate = function() {
      return this._window.present();
    };

    Application.prototype._onStartup = function() {
      return this._buildUI();
    };

    return Application;

  })();

  app = new Application();

  app.application.run(ARGV);

}).call(this);
