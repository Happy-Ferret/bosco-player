// Generated by CoffeeScript 1.11.1
var Bosco, GLib, Gda, Gio, Gtk;

GLib = imports.gi.GLib;

Gtk = imports.gi.Gtk;

Gda = imports.gi.Gda;

Gio = imports.gi.Gio;

export default Bosco = (function() {
  function Bosco() {
    this.setupWindow();
    this.setupDatabase();
    this.selectData();
  }

  Bosco.prototype.setupWindow = function() {
    var info1, info2, insertBox, insertButton, mainBox, sw;
    this.window = new Gtk.Window({
      title: "Bosco",
      height_request: 350,
      window_position: Gtk.WindowPosition.CENTER
    });
    this.window.set_border_width(12);
    this.window.set_icon_from_file("/home/bruce/gjs/bosco/data/bosco.png");
    this.window.connect("delete-event", (function(_this) {
      return function() {
        Gtk.main_quit();
        return true;
      };
    })(this));
    mainBox = new Gtk.Box({
      orientation: Gtk.Orientation.VERTICAL,
      spacing: 5
    });
    this.window.add(mainBox);
    info1 = new Gtk.Label({
      label: "<b>Insert a record</b>",
      xalign: 0,
      use_markup: true
    });
    mainBox.pack_start(info1, false, false, 5);
    insertBox = new Gtk.Box({
      orientation: Gtk.Orientation.HORIZONTAL,
      spacing: 5
    });
    mainBox.pack_start(insertBox, false, false, 5);
    insertBox.pack_start(new Gtk.Label({
      label: "ID:"
    }), false, false, 5);
    this.idEntry = new Gtk.Entry();
    insertBox.pack_start(this.idEntry, false, false, 5);
    insertBox.pack_start(new Gtk.Label({
      label: "Name:"
    }), false, false, 5);
    this.name_entry = new Gtk.Entry({
      activates_default: true
    });
    insertBox.pack_start(this.name_entry, true, true, 5);
    insertButton = new Gtk.Button({
      label: "Insert",
      can_default: true
    });
    insertButton.connect("clicked", (function(_this) {
      return function() {
        return _this.insertClicked();
      };
    })(this));
    insertBox.pack_start(insertButton, false, false, 5);
    insertButton.grab_default();
    info2 = new Gtk.Label({
      label: "<b>Browse the table</b>",
      xalign: 0,
      use_markup: true
    });
    mainBox.pack_start(info2, false, false, 5);
    this.text = new Gtk.TextView({
      editable: false
    });
    sw = new Gtk.ScrolledWindow({
      shadow_type: Gtk.ShadowType.IN
    });
    sw.add(this.text);
    mainBox.pack_start(sw, true, true, 5);
    this.countLabel = new Gtk.Label({
      label: "",
      xalign: 0,
      use_markup: true
    });
    mainBox.pack_start(this.countLabel, false, false, 0);
    this.window.set_default_size(820, 640);
    return this.window.show_all();
  };

  Bosco.prototype.setupDatabase = function() {
    var dm, e, file;
    file = Gio.File.new_for_path((GLib.get_home_dir()) + "/.config/bosco");
    if (!file.query_exists(null)) {
      file.make_directory(null);
    }
    this.connection = new Gda.Connection({
      provider: Gda.Config.get_provider("SQLite"),
      cnc_string: "DB_DIR=" + (GLib.get_home_dir()) + "/.config/bosco;DB_NAME=bosco"
    });
    this.connection.open();
    try {
      return dm = this.connection.execute_select_command("select * from demo");
    } catch (error) {
      e = error;
      return this.connection.execute_non_select_command("create table demo(id integer, name varchar(100))");
    }
  };

  Bosco.prototype.selectData = function() {
    var dm, idField, iter, nameField, text;
    dm = this.connection.execute_select_command("select * from demo order by 1, 2");
    iter = dm.create_iter();
    text = "";
    while (iter.move_next()) {
      idField = Gda.value_stringify(iter.get_value_at(0));
      nameField = Gda.value_stringify(iter.get_value_at(1));
      text += idField + "\t=>\t" + nameField + "\n";
    }
    this.text.buffer.text = text;
    return this.countLabel.label = "<i>" + (dm.get_n_rows()) + " record(s)</i>";
  };

  Bosco.prototype.showError = function(msg) {
    var dialog;
    dialog = new Gtk.MessageDialog({
      message_type: Gtk.MessageType.ERROR,
      buttons: Gtk.ButtonsType.CLOSE,
      text: msg,
      transient_for: this.window,
      modal: true,
      destroy_with_parent: true
    });
    dialog.run();
    return dialog.destroy();
  };

  Bosco.prototype.insertClicked = function() {
    var b, stmt;
    if (!this.validateFields()) {
      return;
    }
    b = new Gda.SqlBuilder({
      stmt_type: Gda.SqlStatementType.INSERT
    });
    b.set_table("demo");
    b.add_field_value_as_gvalue("id", this.idEntry.text);
    b.add_field_value_as_gvalue("name", this.name_entry.text);
    stmt = b.get_statement();
    this.connection.statement_execute_non_select(stmt, null);
    this.clearFields();
    return this.selectData();
  };

  Bosco.prototype.validateFields = function() {
    if (this.idEntry.text === "" || this.name_entry.text === "") {
      this.showError("All fields are mandatory");
      return false;
    }
    if (isNaN(parseInt(this.idEntry.text))) {
      this.showError("Enter a number");
      this.idEntry.grab_focus();
      return false;
    }
    return true;
  };

  Bosco.prototype.clearFields = function() {
    this.idEntry.text = "";
    this.name_entry.text = "";
    return this.idEntry.grab_focus();
  };

  return Bosco;

})();
