// Generated by CoffeeScript 1.11.1
var GObject, Gtk, Pango, ProjectViewer;

GObject = imports.gi.GObject;

Gtk = imports.gi.Gtk;

Pango = imports.gi.Pango;


/*
 *
 * ProjectViewer class - 
 *
 * view autovala data
 *
 */

export default ProjectViewer = (function() {
  function ProjectViewer(prj) {
    this.prj = prj;
  }

  ProjectViewer.prototype.buildUI = function() {
    var bold, item, key, normal, readonly, ref, ref1, value;
    this._listStore = new Gtk.ListStore();
    this._listStore.set_column_types([GObject.TYPE_STRING, GObject.TYPE_STRING, GObject.TYPE_STRING]);
    ref = this.prj.data;
    for (key in ref) {
      item = ref[key];
      if (!Array.isArray(item)) {
        this._listStore.set(this._listStore.append(), [0, 1, 2], [String(key), String(item.value), String(item.readonly)]);
      }
    }
    ref1 = this.prj.data;
    for (key in ref1) {
      item = ref1[key];
      if (Array.isArray(item)) {
        this._listStore.set(this._listStore.append(), [0, 1, 2], [String(key), String(item.length), '']);
      }
    }
    this._treeView = new Gtk.TreeView({
      expand: true,
      model: this._listStore
    });
    key = new Gtk.TreeViewColumn({
      title: "Key"
    });
    value = new Gtk.TreeViewColumn({
      title: "Value"
    });
    readonly = new Gtk.TreeViewColumn({
      title: "Readonly"
    });
    bold = new Gtk.CellRendererText({
      weight: Pango.Weight.BOLD
    });
    normal = new Gtk.CellRendererText();
    key.pack_start(bold, true);
    value.pack_start(normal, true);
    readonly.pack_start(normal, true);
    key.add_attribute(bold, "text", 0);
    value.add_attribute(normal, "text", 1);
    readonly.add_attribute(normal, "text", 2);
    this._treeView.insert_column(key, 0);
    this._treeView.insert_column(value, 1);
    this._treeView.insert_column(readonly, 2);
    this._label = new Gtk.Label({
      label: ""
    });
    this.selection = this._treeView.get_selection();
    this.selection.connect('changed', (function(_this) {
      return function() {
        return _this._onSelectionChanged();
      };
    })(this));
    this._grid = new Gtk.Grid;
    this._grid.attach(this._treeView, 0, 0, 1, 1);
    this._grid.attach(this._label, 0, 1, 1, 1);
    return this._grid;
  };

  ProjectViewer.prototype._onSelectionChanged = function() {
    var isSelected, iter, model, ref;
    ref = this.selection.get_selected(), isSelected = ref[0], model = ref[1], iter = ref[2];
    return this._label.set_label("\n" + this._listStore.get_value(iter, 0) + " " + this._listStore.get_value(iter, 1) + " " + this._listStore.get_value(iter, 2) + "\n");
  };

  return ProjectViewer;

})();
